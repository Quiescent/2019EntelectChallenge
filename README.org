* 2019 Entelect Challenge
This is my submission to the 2019 Entelect Challenge.

* Getting Started
Haskell is a purely functional programming language.  You can find out
more about Haskell [here](https://www.haskell.org/).

** Environment Requirements
Install the [[https://www.haskell.org/platform/][Haskell Platform]] and ensure that the =stack= executable is
on the path.

** Building
Simply run:

#+BEGIN_SRC bash
  stack install --local-bin-path bin
#+END_SRC

to build the binary and put it into a folder in the root of the
project called `bin`.

** Running
Haskell creates native binaries so you can simply run:

#+BEGIN_SRC bash
  ./bin/haskell-bot-exe
#+END_SRC

from the command line to invoke the bot program.

* Project Notes
  :PROPERTIES:
  :ORDERED:  t
  :END:
** DONE Port the starter bot to this RIO app
   CLOSED: [2019-05-01 Wed 09:39]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 09:39] \\
     Important discovery: =liftIO= can be used to bring any standard =IO=
     function into the =RIO Monad= because it's a transformer from =IO=
     already.
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 08:49]
   :END:
** DONE Strip out playing logic
   CLOSED: [2019-05-01 Wed 09:44]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 09:44]
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 09:41]
   :END:
** DONE Model moves
   CLOSED: [2019-05-01 Wed 13:58]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 13:58]
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 10:24]
   :END:
*** DONE Model a map as a single dimensional array
    CLOSED: [2019-05-01 Wed 13:58]
    :LOGBOOK:
    - CLOSING NOTE [2019-05-01 Wed 13:58]
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:23]
    :END:
**** DONE Model a Cell as an Int
     CLOSED: [2019-05-01 Wed 12:36]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 12:36] \\
       Having things in the same file immediately flagged when I moved the
       size out of the structure because it re-declared the function.
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:24]
     :END:
**** DONE Model a Coordinate as an Int
     CLOSED: [2019-05-01 Wed 12:56]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 12:56]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:37]
     :END:
** IN_PROGRESS Implement engine
   :LOGBOOK:
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:01]
   :END:
*** DONE Model Combined Moves
    CLOSED: [2019-05-01 Wed 14:21]
    :LOGBOOK:
    - CLOSING NOTE [2019-05-01 Wed 14:21]
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:01]
    :END:
*** IN_PROGRESS Implement =makeMove=
    :LOGBOOK:
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:21]
    :END:
**** DONE Make opponent mirror player
     CLOSED: [2019-05-01 Wed 15:14]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:14]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:58]
     :END:
**** DONE Make weapon a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:15]
     :END:
**** DONE Make =diggingRange= a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:17]
     :END:
**** DONE Make =movementRange= a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:17]
     :END:
**** IN_PROGRESS Implement Move
     :LOGBOOK:
     - State "IN_PROGRESS" from "TODO"       [2019-05-08 Wed 10:37]
     :END:
***** DONE Rule 1: Two do nothings should do nothing
      CLOSED: [2019-05-08 Wed 11:02]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-08 Wed 11:02]
      - State "IN_PROGRESS" from "TODO"       [2019-05-08 Wed 11:02]
      :END:
***** DONE Rule 2: Moving to dirt does not move the worm
      CLOSED: [2019-05-11 Sat 13:05]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-11 Sat 13:05]
      :END:
***** DONE Rule 3: Moving to space does not move the worm
      CLOSED: [2019-05-23 Thu 12:43]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-23 Thu 12:43]
      :END:
***** DONE Rule 4: Moving to air does move the worm
      CLOSED: [2019-05-23 Thu 12:43]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-23 Thu 12:43]
      :END:
***** DONE Rule 5: Moving to the same square causes one of the worms to remain where it is and both to take damage
      CLOSED: [2019-06-02 Sun 11:39]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 11:39]
      - Note taken on [2019-06-02 Sun 10:41] \\
        See rule 8 for the reason that this is being re-worked.
      - State "IN_PROGRESS" from "DONE"       [2019-06-02 Sun 10:41]
      - CLOSING NOTE [2019-05-26 Sun 09:38]
      - State "IN_PROGRESS" from "TODO"       [2019-05-23 Thu 12:52]
      - Note taken on [2019-05-08 Wed 11:05] \\
        This is controlled by the pure value `thisMoveWins' which will only be
        evaluated (creating the random variable) when we need it to adjudicate
        who wins.
      :END:
***** DONE Rule 6: Moving to a square which is occupied by another worm results in no change
      CLOSED: [2019-05-28 Tue 13:10]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-28 Tue 13:10]
      - State "IN_PROGRESS" from "TODO"       [2019-05-26 Sun 09:42]
      :END:
***** DONE Rule 7: Moving to a square which contains a medipack changes that square to air and increases that worms health
      CLOSED: [2019-06-01 Sat 10:48]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-01 Sat 10:48]
      :END:
***** DONE Rule 8: Simultaneous moves to a medipack result in only one worm getting the health from the medipack
      CLOSED: [2019-06-02 Sun 11:39]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 11:39]
      - Note taken on [2019-06-02 Sun 10:39] \\
        I've discovered that this interpretation is not correct.  From the
        rules: Worms will either swap places or stay in their current
        positions (with an equal probability)
      - State "IN_PROGRESS" from "DONE"       [2019-06-02 Sun 10:39]
      - CLOSING NOTE [2019-06-01 Sat 10:58]
      - State "IN_PROGRESS" from "TODO"       [2019-06-01 Sat 10:48]
      :END:
***** DONE Rule 9: Moving off the edge of the map does nothing
      CLOSED: [2019-06-02 Sun 09:18]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 09:18]
      - State "IN_PROGRESS" from "TODO"       [2019-06-01 Sat 17:04]
      :END:
**** DONE Implement Score Changes for Move
     CLOSED: [2019-06-03 Mon 13:07]
***** DONE Rule 1: Moving to dirt penalises your score by 4
      CLOSED: [2019-06-02 Sun 10:21]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 10:21]
      - State "IN_PROGRESS" from "TODO"       [2019-06-02 Sun 09:18]
      :END:
***** DONE Rule 2: Moving to space penalises your score by 4
      CLOSED: [2019-06-02 Sun 10:21]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 10:21]
      - State "IN_PROGRESS" from "TODO"       [2019-06-02 Sun 09:46]
      :END:
***** DONE Rule 3: Moving to an occupied cell penalises your score by 4
      CLOSED: [2019-06-02 Sun 10:21]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 10:21]
      - State "IN_PROGRESS" from "TODO"       [2019-06-02 Sun 09:47]
      :END:
***** DONE Rule 4: Moving to air increases your score by 5
      CLOSED: [2019-06-02 Sun 10:38]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-02 Sun 10:38]
      - State "IN_PROGRESS" from "TODO"       [2019-06-02 Sun 10:21]
      :END:
**** DONE Implement Dig
     CLOSED: [2019-06-07 Fri 11:01]
     :LOGBOOK:
     - CLOSING NOTE [2019-06-07 Fri 11:01]
     :END:
***** DONE Rule 1: Digging air does nothing
      CLOSED: [2019-06-03 Mon 19:22]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-03 Mon 19:22] \\
        This is covered by the fact that my game engine models moving into
        dirt as digging it.  i.e. you cannot command a worm to dig air.
      - State "IN_PROGRESS" from "TODO"       [2019-06-03 Mon 13:07]
      :END:
***** DONE Rule 2: Digging dirt clears the square
      CLOSED: [2019-06-07 Fri 11:00]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-07 Fri 11:00]
      - State "IN_PROGRESS" from "TODO"       [2019-06-03 Mon 19:24]
      :END:
***** DONE Rule 3: Digging space does nothing
      CLOSED: [2019-06-03 Mon 19:23]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-03 Mon 19:23] \\
        This is not possible in my game engine because moving into space is an
        invalid move and moving into dirt is the only way to dig it.
      :END:
**** DONE Implement Score Changes for Digging
     CLOSED: [2019-06-07 Fri 11:17]
     :LOGBOOK:
     - CLOSING NOTE [2019-06-07 Fri 11:17]
     - State "IN_PROGRESS" from "TODO"       [2019-06-07 Fri 11:01]
     :END:
***** DONE Rule 1: Digging air penalises your score by 4
      CLOSED: [2019-06-07 Fri 11:02]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-07 Fri 11:02] \\
        It's not possible to dig into air because moving into air is a valid
        move and the only way to dig is to move into dirt.
      - State "IN_PROGRESS" from "TODO"       [2019-06-07 Fri 11:01]
      :END:
***** DONE Rule 2: Digging dirt increases your score by 7
      CLOSED: [2019-06-07 Fri 11:17]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-07 Fri 11:17]
      - State "IN_PROGRESS" from "TODO"       [2019-06-07 Fri 11:05]
      :END:
***** DONE Rule 3: Digging space penalises your score by 4
      CLOSED: [2019-06-07 Fri 11:02]
      :LOGBOOK:
      - CLOSING NOTE [2019-06-07 Fri 11:02] \\
        It's not possible to dig into space with this engine, because moving
        into dirt is what is considered digging.
      :END:
**** TODO Implement Shoot
***** TODO Implement a Scenario Generator and Test It
***** TODO Rule 1: A shot hits the first target in range
***** TODO Rule 2: A shot hits nothing if nothing is in range in that direction
***** TODO Rule 3: A shot is blocked by dirt and deep space
***** TODO Rule 4: Worms reduced to zero health are removed from the map
***** TODO Rule 5: A shot causes x points of damage (Where x is defined in the state file)
***** TODO Rule 6: A shots range is d euclidean units (where d is defined in the state file)
**** TODO Implement Score Changes for Shoot
***** TODO Rule 1: A shot which hits one of your worms penalises your score by 20
***** TODO Rule 2: A shot which hits an enemy worm increases your score by 20
***** TODO Rule 3: A shot which knocks an enemy worm unconscious gives you 40
***** TODO Rule 4: A shot which hits nothing increases your score by 4
*** TODO Create Test Harness
** TODO Model search tree type
** TODO Implement search function

* Questions About the Engine
** TODO Do two worms always get to move?  (Or do you miss turns when your other worms die)
* License
Copyright Edward John Steere (c) 2019

Distributed under the GNU General Public License, version 3.
