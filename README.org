* 2019 Entelect Challenge
This is my submission to the 2019 Entelect Challenge.

* Getting Started
Haskell is a purely functional programming language.  You can find out
more about Haskell [here](https://www.haskell.org/).

** Environment Requirements
Install the [[https://www.haskell.org/platform/][Haskell Platform]] and ensure that the =stack= executable is
on the path.

** Building
Simply run:

#+BEGIN_SRC bash
  stack install --local-bin-path bin
#+END_SRC

to build the binary and put it into a folder in the root of the
project called `bin`.

** Running
Haskell creates native binaries so you can simply run:

#+BEGIN_SRC bash
  ./bin/haskell-bot-exe
#+END_SRC

from the command line to invoke the bot program.

* Project Notes
  :PROPERTIES:
  :ORDERED:  t
  :END:
** DONE Port the starter bot to this RIO app
   CLOSED: [2019-05-01 Wed 09:39]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 09:39] \\
     Important discovery: =liftIO= can be used to bring any standard =IO=
     function into the =RIO Monad= because it's a transformer from =IO=
     already.
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 08:49]
   :END:
** DONE Strip out playing logic
   CLOSED: [2019-05-01 Wed 09:44]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 09:44]
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 09:41]
   :END:
** DONE Model moves
   CLOSED: [2019-05-01 Wed 13:58]
   :LOGBOOK:
   - CLOSING NOTE [2019-05-01 Wed 13:58]
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 10:24]
   :END:
*** DONE Model a map as a single dimensional array
    CLOSED: [2019-05-01 Wed 13:58]
    :LOGBOOK:
    - CLOSING NOTE [2019-05-01 Wed 13:58]
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:23]
    :END:
**** DONE Model a Cell as an Int
     CLOSED: [2019-05-01 Wed 12:36]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 12:36] \\
       Having things in the same file immediately flagged when I moved the
       size out of the structure because it re-declared the function.
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:24]
     :END:
**** DONE Model a Coordinate as an Int
     CLOSED: [2019-05-01 Wed 12:56]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 12:56]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 12:37]
     :END:
** IN_PROGRESS Implement engine
   :LOGBOOK:
   - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:01]
   :END:
*** DONE Model Combined Moves
    CLOSED: [2019-05-01 Wed 14:21]
    :LOGBOOK:
    - CLOSING NOTE [2019-05-01 Wed 14:21]
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:01]
    :END:
*** IN_PROGRESS Implement =makeMove=
    :LOGBOOK:
    - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:21]
    :END:
**** DONE Make opponent mirror player
     CLOSED: [2019-05-01 Wed 15:14]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:14]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 14:58]
     :END:
**** DONE Make weapon a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:15]
     :END:
**** DONE Make diggingRange a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:17]
     :END:
**** DONE Make movementRange a state level attribute
     CLOSED: [2019-05-01 Wed 15:23]
     :LOGBOOK:
     - CLOSING NOTE [2019-05-01 Wed 15:23]
     - State "IN_PROGRESS" from "TODO"       [2019-05-01 Wed 15:17]
     :END:
**** IN_PROGRESS Implement Move
     :LOGBOOK:
     - State "IN_PROGRESS" from "TODO"       [2019-05-08 Wed 10:37]
     :END:
***** DONE Rule 1: Two do nothings should do nothing
      CLOSED: [2019-05-08 Wed 11:02]
      :LOGBOOK:
      - CLOSING NOTE [2019-05-08 Wed 11:02]
      - State "IN_PROGRESS" from "TODO"       [2019-05-08 Wed 11:02]
      :END:
**** TODO Implement Score Changes for Move
**** TODO Implement Dig
**** TODO Implement Score Changes for Digging
**** TODO Implement Shoot
**** TODO Implement Score Changes for Shoot
*** TODO Create Test Harness
** TODO Model search tree type
** TODO Implement search function

* Questions About the Engine
** TODO Do two worms always get to move?  (Or do you miss turns when your other worms die)
* License
Copyright Edward John Steere (c) 2019

Distributed under the GNU General Public License, version 3.
